@using SalesSystemWebApp.Components
@using SalesSystemWebApp.Security
@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudButton Variant="Variant.Text" Href="/" Class="mx-2">
            Home
        </MudButton>

        <MudSpacer />

        <CartIcon class="mr-4" />

        <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" ActivationEvent="@MouseEvent.LeftClick">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.ManageAccounts">Account</MudButton>
            </ActivatorContent>
            <ChildContent>
                @if (!IsAuthenticated)
                {
                    <MudNavLink Icon="@Icons.Material.TwoTone.Login" Href="/sign-in">Sign In</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.TwoTone.AppRegistration" Href="/sign-up">Sign Up</MudNavLink>
                }
                else
                {
                    <MudButton Icon="@Icons.Material.TwoTone.Logout" Variant="Variant.Text" Color="Color.Error" OnClick="Logout">Logout</MudButton>
                }
            </ChildContent>
        </MudMenu>
    </MudAppBar>

    <MudMainContent>
        <MudContainer Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code
{
    [Inject]
    public IJwtAuthenticationStateProvider JwtAuthenticationStateProvider { get; set; } = default!;

    [Inject]
    public NavigationManager Navigation { get; set; } = default!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    private bool _isDrawerOpened = true;
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _isDarkMode = true;
    private bool IsAuthenticated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsAuthenticated = await JwtAuthenticationStateProvider.CheckAuthenticatedAsync();
    }

    private void ToggleDrawer()
    {
        _isDrawerOpened = !_isDrawerOpened;
    }

    private async Task Logout()
    {
        await JwtAuthenticationStateProvider.RemoveTokenAsync();
        IsAuthenticated = false;
        StateHasChanged();
        Snackbar.Add("You have successfully disconnected.", Severity.Info);
        Navigation.NavigateTo("/");
    }
}